{"version":3,"sources":["assets/artwork.js","components/Grid/griditem.js","components/Button/button.js","components/Grid/grid.js","App.js","reportWebVitals.js","index.js"],"names":["artwork","id","url","title","rotate","GridItem","artPiece","handleDrag","handleDrop","handleClick","inGrid","rotateStyle","transform","className","draggable","onDragOver","e","preventDefault","onDragStart","onDrop","onClick","src","alt","style","Button","label","action","ArtGrid","artArray","useState","artArranged","setArtArranged","useEffect","console","log","x","y","total","gridSize","moveID","setMoveID","currentTarget","dragIndex","findIndex","dropIndex","temp","rotateIndex","newRotation","newOrder","array","i","length","j","Math","floor","random","randomSort","slice","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60a70ead.chunk.js","sourcesContent":["/** @format */\n\nexport const artwork = [\n\t{\n\t\tid: \"a1\",\n\t\turl: \"https://picsum.photos/id/1002/200\",\n\t\ttitle: \"artwork 1\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a2\",\n\t\turl: \"https://picsum.photos/id/101/200\",\n\t\ttitle: \"artwork 2\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a3\",\n\t\turl: \"https://picsum.photos/id/1014/200\",\n\t\ttitle: \"artwork 3\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a4\",\n\t\turl: \"https://picsum.photos/id/102/200\",\n\t\ttitle: \"artwork 4\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a5\",\n\t\turl: \"https://picsum.photos/id/1025/200\",\n\t\ttitle: \"artwork 5\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a6\",\n\t\turl: \"https://picsum.photos/id/1051/200\",\n\t\ttitle: \"artwork 6\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a7\",\n\t\turl: \"https://picsum.photos/id/1026/200\",\n\t\ttitle: \"artwork 7\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a8\",\n\t\turl: \"https://picsum.photos/id/1035/200\",\n\t\ttitle: \"artwork 8\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a9\",\n\t\turl: \"https://picsum.photos/id/1048/200\",\n\t\ttitle: \"artwork 9\",\n\t\trotate: 0,\n\t},\n\t{\n\t\tid: \"a10\",\n\t\turl: \"https://picsum.photos/id/1054/200\",\n\t\ttitle: \"artwork 10\",\n\t\trotate: 0,\n\t},\n];\n","/** @format */\n// Global\nimport React from \"react\";\n\n// !! need to implement useMemo to eliminate rerendering of items not changing\n\nconst GridItem = ({ artPiece, handleDrag, handleDrop, handleClick, inGrid }) => {\n\t// transform style to set display orientation of artwork\n\tconst rotateStyle = { transform: \"rotate(\" + artPiece.rotate + \"deg)\" };\n\n\treturn (\n\t\t<div\n\t\t\tclassName={inGrid ? \"grid-item\" : \"extra-item\"}\n\t\t\tdraggable={true}\n\t\t\tid={artPiece.id}\n\t\t\tonDragOver={(e) => e.preventDefault()}\n\t\t\tonDragStart={handleDrag}\n\t\t\tonDrop={handleDrop}\n\t\t\tonClick={handleClick}\n\t\t>\n\t\t\t<img src={artPiece.url} alt={artPiece.title} className=\"image\" style={rotateStyle} />\n\t\t</div>\n\t);\n};\nexport default GridItem;\n","/** @format */\n\n// Global\nimport React from \"react\";\n\n// Local\nimport \"./button.css\";\n\n// Standard button\nexport const Button = ({ label, action }) => {\n\treturn (\n\t\t<button className=\"btn\" onClick={action}>\n\t\t\t{label}\n\t\t</button>\n\t);\n};\n","/** @format */\n\n// Global\nimport React, { useEffect, useState } from \"react\";\n\n// Local\nimport \"./grid.css\";\nimport GridItem from \"./griditem\";\nimport { Button } from \"../Button/button\";\n\n// Helper Functions\n// Fisher-Yates Algorithm for random sorting an array\nconst randomSort = (array) => {\n\tfor (let i = array.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * i);\n\t\tconst temp = array[i];\n\t\tarray[i] = array[j];\n\t\tarray[j] = temp;\n\t}\n\tconsole.log(\"return array: \", array);\n\treturn array;\n};\n\n// Component\nconst ArtGrid = ({ artArray }) => {\n\t// organized array of artwork\n\tconst [artArranged, setArtArranged] = useState([]);\n\n\t// initialize artwork at page load\n\tuseEffect(() => {\n\t\tsetArtArranged(artArray);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconsole.log(\"arranged: \", artArranged);\n\t}, [artArranged]);\n\n\t// current grid size\n\t// !! using state so this can eventually be dynamically changed by user\n\t// !! future gridSize object will include x=number of pieces in each row, y=number of rows, total=method that calculate total number of pieces in grid\n\tconst [gridSize, setGridSize] = useState({ x: 3, y: 2, total: 6 });\n\n\t// art being moved\n\tconst [moveID, setMoveID] = useState();\n\t// !! refactor - make all these functions methods on an art object so they get passed with the artpiece instead of each being passed individually\n\t// keep track of art being moved\n\tconst handleDrag = (e) => {\n\t\tsetMoveID(e.currentTarget.id);\n\t};\n\n\t// swap art being moved with art in target box\n\tconst handleDrop = (e) => {\n\t\tconst dragIndex = artArranged.findIndex((artPiece) => artPiece.id === moveID);\n\t\tconst dropIndex = artArranged.findIndex((artPiece) => artPiece.id === e.currentTarget.id);\n\t\tif (dragIndex === -1 || dropIndex === -1) {\n\t\t\treturn;\n\t\t}\n\t\tsetArtArranged((artArranged) => {\n\t\t\tlet temp = [...artArranged];\n\t\t\t[temp[dragIndex], temp[dropIndex]] = [temp[dropIndex], temp[dragIndex]];\n\t\t\treturn temp;\n\t\t});\n\t};\n\n\t// rotate art 90' clockwise by clicking\n\tconst handleClick = (e) => {\n\t\te.preventDefault();\n\t\tconst rotateIndex = artArranged.findIndex((artPiece) => artPiece.id === e.currentTarget.id);\n\t\tconst newRotation = (artArranged[rotateIndex].rotate += 90);\n\t\tsetArtArranged((artArranged) => {\n\t\t\tlet temp = [...artArranged];\n\t\t\ttemp[rotateIndex].rotate = newRotation;\n\t\t\treturn temp;\n\t\t});\n\t};\n\n\t// rearrange art - random sort\n\tconst arrangeRandom = () => {\n\t\tlet newOrder = randomSort(artArranged);\n\t\tsetArtArranged([...newOrder]);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"options\">\n\t\t\t\t<Button label=\"Random Sort\" action={arrangeRandom} />\n\t\t\t</div>\n\t\t\t<div className=\"grid\">\n\t\t\t\t{artArranged.slice(0, [gridSize.total]).map((artPiece) => (\n\t\t\t\t\t<GridItem\n\t\t\t\t\t\tkey={artPiece.id}\n\t\t\t\t\t\tartPiece={artPiece}\n\t\t\t\t\t\thandleDrag={handleDrag}\n\t\t\t\t\t\thandleDrop={handleDrop}\n\t\t\t\t\t\thandleClick={handleClick}\n\t\t\t\t\t\tinGrid\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"extra\">\n\t\t\t\t{artArranged.slice([gridSize.total]).map((artPiece) => (\n\t\t\t\t\t<GridItem\n\t\t\t\t\t\tkey={artPiece.id}\n\t\t\t\t\t\tartPiece={artPiece}\n\t\t\t\t\t\thandleDrag={handleDrag}\n\t\t\t\t\t\thandleDrop={handleDrop}\n\t\t\t\t\t\thandleClick={handleClick}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t);\n};\nexport default ArtGrid;\n","/** @format */\n\n// Local\nimport \"./App.css\";\nimport { artwork } from \"./assets/artwork\";\nimport ArtGrid from \"./components/Grid/grid\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<ArtGrid artArray={artwork} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/** @format */\n\n// Global\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Local\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}